name: Deploy to AWS ECS

on:
    push:
        branches:
            - main
    workflow_dispatch: # Permite execução manual do pipeline

jobs:

    # Job Read Config
    read-config:
      runs-on: ubuntu-latest
      outputs:
        destroy: ${{ steps.get-destroy-output.outputs.destroy }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Read config.yaml
          id: get-destroy-output
          run: |
            destroy=$(yq e '.destroy' config.yaml)
            echo "Valor de destroy: $destroy"
            echo "::set-output name=destroy::$destroy"
            
    # Job to Build
    build:
        runs-on: ubuntu-latest
        needs: read-config
        if: needs.read-config.outputs.destroy == 'false'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            
            - name: Set Up JDK 21
              uses: actions/setup-java@v4
              with:
                java-version: '21'
                distribution: 'graalvm'

            - name: Grant execute permission for gradlew
              run: chmod +x app/gradlew

            - name: Build with gradle
              run: ./gradlew nativeCompile
              working-directory: app
    
    # Job Provision resources
    provision-resource:
      runs-on: ubuntu-latest
      needs: build
      if: needs.read-config.outputs.destroy == 'false'
      steps:
        - uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
            aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            aws-region: us-east-1

        - name: Install Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.0.0

        - name: Terraform Init
          run: terraform init
          working-directory: ./infra

        - name: Terraform Plan
          run: terraform plan
          working-directory: ./infra

        - name: Terraform Apply
          run: terraform apply -auto-approve
          working-directory: ./infra
    
    # Job Push to ECR
    push-ecr:
        runs-on: ubuntu-latest
        needs: provision-resource
        if: needs.read-config.outputs.destroy == 'false'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            - name: Log in to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push Docker image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                # Build the Docker image with the specific tag (using the commit SHA)
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                
                # Push the image with the specific tag
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
                # Tag the image as 'latest'
                docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
                
                # Push the 'latest' tag
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
              working-directory: app

    destroy-infra:
      runs-on: ubuntu-latest
      needs: read-config
      if: needs.read-config.outputs.destroy == 'true'
      steps:
        - uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
            aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            aws-region: us-east-1

        - name: Install Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.0.0

        - name: Terraform Init
          run: terraform init
          working-directory: ./infra

        - name: Delete all images from ECR repository
          run: |
            aws ecr list-images --repository-name my-spring-native-app --query 'imageIds[*]' --output json | \
            jq -c '.[]' | while read imageId; do
              aws ecr batch-delete-image --repository-name my-spring-native-app --image-ids "$imageId"
            done
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: us-east-1

        - name: Terraform Destroy
          run: terraform destroy -auto-approve
          working-directory: ./infra